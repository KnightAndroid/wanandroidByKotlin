//********* Base module 模块的公共脚本配置 **********
import com.knight.wanandroid.buildsrc.*

if (ProjectBuildDencies.APP_MODE) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlinx-serialization'

android {
    compileSdkVersion ProjectBuildDencies.COMPILE_SDK_VERSION
    buildToolsVersion ProjectBuildDencies.BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion ProjectBuildDencies.MIN_SDK_VERSION
        targetSdkVersion ProjectBuildDencies.TARGET_SDK_VERSION
        versionCode ProjectBuildDencies.VERSION_CODE
        versionName ProjectBuildDencies.VERSION_NAME
      //  proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        testInstrumentationRunner Dependencies.Androidx.ANDROID_JUNIT_RUNNER
        ndk {
            // 设置支持的SO库架构
            //abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    //解决 单moduule 运行 java.lang.RuntimeException: ARouter::Compiler >>> No module name
    if (ProjectBuildDencies.APP_MODE) {
        hilt {
            enableExperimentalClasspathAggregation = true // 此行不加会遇到下面的新问题
            enableAggregatingTask = false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    buildFeatures {
        viewBinding = true
        dataBinding true
    }

    sourceSets {
        main {
            if(ProjectBuildDencies.APP_MODE){
                manifest.srcFile 'src/main/manifest/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }

            res.srcDirs =
                    [
                            'src/main/res/layouts/activitys',
                            'src/main/res/layouts/fragments',
                            'src/main/res/layouts/adapters',
                            'src/main/res/layouts/items',
                            'src/main/res/layouts/dialogs',
                            'src/main/res/layouts',
                            'src/main/res'

                    ]
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']


            jniLibs.srcDirs = ['libs']
        }
    }

    buildTypes {
        debug {
            buildConfigField "String","TYPE","\"${ProjectBuildDencies.Variants.DEVELOP}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            buildConfigField "String","TYPE","\"${ProjectBuildDencies.Variants.RELEASE}\""
            minifyEnabled false
           // consumerProguardFiles 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        master {
            buildConfigField "String","TYPE","\"${ProjectBuildDencies.Variants.MASTER}\""
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }

    testOptions {
        unitTests.returnDefaultValues = true
    }




}

kapt {
    arguments {

        arg("eventBusIndex", "${ProjectBuildDencies.APPLICATION_ID}.eventbus.index.${project.name}EventIndex")
        arg("GOROUTER_MODULE_NAME", project.name)
    }
}




dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api project(":nowinandroid:core:library_util")
    api project(":nowinandroid:core:library_network")
    api project(":nowinandroid:core:library_widget")
    api project(":nowinandroid:core:library_aop")
    api project(":nowinandroid:core:library_base")
    api project(":nowinandroid:core:library_database")
    api project(":nowinandroid:core:library_permiss")
    api project(":nowinandroid:core:module_aar:aar")
    testImplementation Dependencies.Android.JUNIT
    androidTestImplementation Dependencies.Androidx.TEST_EXT_JUNIT
    androidTestImplementation Dependencies.Androidx.TEST_ESPRESSO
    implementation Dependencies.JetPack.HILT_CORE

    kapt Dependencies.GitHub.GO_ROUTER_COMPILER
    kapt Dependencies.GitHub.EVENTBUS_APT
    kapt Dependencies.GitHub.AUTO_SERVICE_ANNOTATIONS
    kapt Dependencies.JetPack.HILT_APT
    kapt Dependencies.JetPack.HILT_ANDROIDX
    kapt Dependencies.JetPack.LIFECYCLE_COMPILER_APT





}


